version: '3'
services:
    web:
        image: nginx:alpine
        volumes:
            - "./etc/nginx_include:/etc/nginx_include"
            #- "./etc/nginx:/etc/nginx/conf.d"
            - "./etc/nginx_local:/etc/nginx/conf.d/:ro"
            - "./etc/ssl/www/:/var/www/certbot/:ro"
            - "./etc/letsencrypt/:/etc/nginx/ssl/:ro"
            - "./web:/var/www/html"
            - "./etc/log/:/var/log/nginx/:rw"
        ports:
            - "8044:80"
            #- "8009:8081"
            - "4000:443"
        restart: always
        depends_on:
            - php
            - mysql
            - redis
        command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    # certbot:
    #     image: certbot/certbot:latest
    #     volumes:
    #         - ./etc/ssl/www:/var/www/certbot:rw
    #         - ./etc/letsencrypt/:/etc/letsencrypt/:rw
    #     # for certbot reviewal
    #     entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    php:
        # we will u use the Dockerfile.php_servide to load the image also
        # image: nanoninja/php-fpm:${PHP_VERSION}
        env_file:
            - ".env"
              #extra_hosts:
              #- "host.docker.internal:host-gateway"
              #extra_hosts:
              #- "host.docker.internal:172.17.0.1"
                #- "host.docker.internal:172.17.53.129"
        expose: 
            # this is so nginx service can conect to this service on port 9000
            # this service will connect back to our host machine on port 9003!
            - 9000
        build: 
            context: ./docker-files
            dockerfile: Dockerfile.php_service
            args:
                PHP_VERSION: ${PHP_VERSION}
        restart: always
          # not needed as we run in crone
          # command: "/bin/sh -c 'while :; do sleep 10s & wait $${!}; /usr/local/bin/php /var/www/html/jobbswiper/artisan schedule:run >> /var/log/cron.log 2>&1; done;'"
        volumes:
            - "./etc/php/php.ini:/usr/local/etc/php/conf.d/php.ini"
            # - "./etc/php/php.ini:/usr/local/etc/php/conf.d/php-cli.ini"
            - "./web:/var/www/html"
            - "./web/log/xdebug.log:/var/log/xdebug.log"
        environment:
            - XDEBUG_MODE=debug
            # - XDEBUG_CONFIG=client_host=${DOCKER_HOST_IP} client_port=9003
            # - XDEBUG_CONFIG=client_host=host.docker.internal client_port=9003
            #i - XDEBUG_CONFIG=client_host=172.17.53.129 client_port=9003
            # - APP_URL=https://tasty.example.com
            # - APP_URL=http://localhost:8008
            # - DB_DATABASE=${MYSQL_DATABASE1}
            - APP_NAME=${APP_NAME}
            - APP_ENV=local
            - APP_DEBUG=true
            - DB_CONNECTION=mysql
            - DB_HOST=mysql
            - DB_USERNAME=${MYSQL_USER}
            - DB_PASSWORD=${MYSQL_PASSWORD}
            - REDIS_HOST=redis
            - REDIS_PASSWORD=${REDIS_PASSWORD}
            #- CACHE_DRIVER=redis
            #- REDIS_HOST=redis
# composer:
#     build:
#         context: ./docker-files
#         dockerfile: Dockerfile.composer_service
#     volumes:
#         - "./web/TastyIgniter:/app"
#     command: install
# myadmin:
#     image: phpmyadmin/phpmyadmin
#     container_name: phpmyadmin
#     ports:
#         - "8080:80"
#     environment:
#         - PMA_ARBITRARY=1
#         - PMA_HOST=${MYSQL_HOST}
#     restart: always
#     depends_on:
#         - mysqldb
    mysql:
        image: mysql:${MYSQL_VERSION}
        restart: always
        env_file:
            - ".env"
        environment:
            - MYSQL_DATABASE=${MYSQL_DATABASE}
            - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
            - MYSQL_USER=${MYSQL_USER}
            - MYSQL_PASSWORD=${MYSQL_PASSWORD}
        ports:
            - "8980:3306"
        volumes:
            - "./data/db/mysql:/var/lib/mysql"
    redis:
        image: redis:6.2-alpine
        restart: always
        env_file:
            - ".env"
        ports:
            - '6379:6379'
        command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
        volumes:
            - ./data/redis:/data
